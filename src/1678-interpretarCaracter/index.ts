function interpret(command:string):string{
    let resultado='';

    for(let i=0;i<command.length;i++){
        if(command[i]==='G'){
            resultado+='G'
        }else if(command[i]==='(' && command[i+1]===')'){
            resultado+='o'
            i++
        }else if(command[i]==='(' && command[i+1]==='a' ){//else if(command[i]==='(' && command[i+1]==='a' && command[i+2]==='l' && command[i+3]===')'){
            resultado+='al'
            i+=3
        }
    }
    return resultado        
}

console.log(interpret("G()(al)G")) // "Goal" 
//console.log(interpret("G()()()()(al)")) // "Gooooal"
//console.log(interpret("G(al)G(al)()()G")) // "GalGalooG" 

/*Opcion con patrones
function interpret(command: string): string {
  return command.replaceAll("()", "o").replaceAll("(al)", "al");
}
*/

/*Flashcards
1. Â¿QuÃ© hace el mÃ©todo += en resultado += "G"?
ðŸ”¹ Suma o concatena el valor al contenido actual de la variable resultado.

2. Â¿Por quÃ© se usa i++ despuÃ©s de encontrar "()"?
ðŸ”¹ Para saltar el carÃ¡cter ), ya que "()" ocupa dos caracteres, y el siguiente ya fue procesado.

3. Â¿QuÃ© pasa si no haces i += 3 al encontrar "(al)"?
ðŸ”¹ El ciclo volverÃ­a a evaluar los caracteres 'a', 'l', y ')', provocando errores o resultados incorrectos.

4. Â¿QuÃ© tipo de estructura se usa para recorrer el string?
ðŸ”¹ Un for loop con Ã­ndice manual (for(let i=0; i<command.length; i++)).

5. Â¿QuÃ© evalÃºa la condiciÃ³n command[i] === '(' && command[i+1] === ')'?
ðŸ”¹ Si los caracteres actuales forman el patrÃ³n "()" para convertirlo en "o".

6. Â¿CÃ³mo se decide quÃ© agregar al resultado?
ðŸ”¹ SegÃºn el patrÃ³n actual ("G", "()" o "(al)") se concatena "G", "o" o "al" respectivamente.

7. Â¿Por quÃ© no usamos command.includes("G")?
ðŸ”¹ Porque necesitamos procesar carÃ¡cter por carÃ¡cter y tomar decisiones segÃºn la posiciÃ³n, no solo saber si existe.

8. Â¿QuÃ© tipo de dato devuelve esta funciÃ³n?
ðŸ”¹ Devuelve un string.

9. Â¿QuÃ© pasa si el string es vacÃ­o ""?
ðŸ”¹ El ciclo no se ejecuta y retorna un string vacÃ­o ("").

10. Â¿Por quÃ© esta soluciÃ³n es eficiente?
ðŸ”¹ Porque recorre el string una sola vez: O(n) complejidad lineal.

ðŸ§  FLASHCARDS - UNIR CARACTERES
1. Â¿QuÃ© hace el mÃ©todo .join() en un array?
ðŸ”¹ Une todos los elementos del array en un solo string, usando el separador que le indiques.

2. Â¿QuÃ© pasa si uso .join('') con un array de caracteres?
ðŸ”¹ Junta los caracteres sin ningÃºn espacio ni coma entre ellos. Ejemplo: ['H','o','l','a'] â†’ "Hola".

3. Â¿CuÃ¡l es la diferencia entre .join() y .push()?
ðŸ”¹ join() crea un string a partir del array.
ðŸ”¹ push() agrega un nuevo valor al final del array.

4. Â¿QuÃ© mÃ©todo es mÃ¡s adecuado para unir caracteres: .join() o .filter()? Â¿Por quÃ©?
ðŸ”¹ .join() es el adecuado, porque no queremos eliminar o seleccionar elementos, sino unirlos.

5. Â¿Para quÃ© sirve el parÃ¡metro dentro de .join()?
ðŸ”¹ Especifica quÃ© se pondrÃ¡ entre cada elemento (por ejemplo: '', ',', ' ').

6. Â¿Se puede hacer lo mismo que .join() con un bucle for?
ðŸ”¹ SÃ­, pero es mÃ¡s largo. HabrÃ­a que declarar una variable string y concatenar elemento por elemento.

7. Â¿QuÃ© retorna .join()?
ðŸ”¹ Un nuevo string, no modifica el array original.

8. Â¿CuÃ¡l es la complejidad de .join()?
ðŸ”¹ O(n), ya que recorre todos los elementos del array para unirlos.*/